import numpy as np
from functools import lru_cache

input_information = {"graph": {"nodes": [1, 2, 3, 4], "edges": [[1, 2], [2, 3], [3, 4], [1, 4]]}}
graph = input_information["graph"]
nodes = graph["nodes"]
len_matrix = len(nodes)
edges = graph["edges"]
zero_matrix = np.zeros((len_matrix, len_matrix), dtype=int)

# матрица связей через 0 и 1
for i in range(len_matrix):
    matrix_element = edges[i]
    for j in range(len(matrix_element)):
        zero_matrix[matrix_element[0] - 1][matrix_element[1] - 1] = 1
        zero_matrix[matrix_element[1] - 1][matrix_element[0] - 1] = 1

# матрица расстояний
distance_matrix = np.full((len_matrix, len_matrix), float('inf'))
distance_matrix[zero_matrix == 1] = 1 # если есть связи, то возвращает True и будет единичка в матрице расстояний
np.fill_diagonal(distance_matrix, 0) # заполняем диагональ нулями, так как сам в себя идти не может

# Решение задачи коммивояжера
def solve_tsp(graph):
    size = len(graph)
    all_seen = (1 << size) - 1

    @lru_cache(None) #None - нет ограничения по сохраняемому кэшу
    def explore(place, seen):
        if seen == all_seen:
            dist_to_origin = graph[place][0]
            return dist_to_origin if dist_to_origin != float('inf') else float('inf')

        lowest_cost = float('inf')
        for next_place in range(size):
            if not (seen & (1 << next_place)):
                edge_cost = graph[place][next_place]
                if edge_cost != float('inf'):
                    total = edge_cost + explore(next_place, seen | (1 << next_place))
                    lowest_cost = min(lowest_cost, total)
        return lowest_cost

    def trace_route():
        marked = 1 << 0
        route = [0]
        total_weight = 0
        while len(route) < size:
            min_weight = float('inf')
            next_stop = None
            current = route[-1]
            for candidate in range(size):
                if not (marked & (1 << candidate)):
                    if graph[current][candidate] != float('inf'):
                        weight = graph[current][candidate]
                        if weight < min_weight:
                            min_weight = weight
                            next_stop = candidate

            if next_stop is None:
                return None, None

            route.append(next_stop)
            total_weight += min_weight
            marked = marked | (1 << next_stop)

        if graph[route[-1]][0] != float('inf'):
            total_weight += graph[route[-1]][0]
            route_nodes = []
            for idx in route:
                route_nodes.append(nodes[idx])
            return total_weight, route_nodes

        return None, None

    cost = explore(0, 1 << 0)
    final_cost, path = trace_route()
    return cost, path

min_dist, best_route = solve_tsp(distance_matrix)
result = {"path": best_route, "total_distance": float(min_dist)}
print(result)
